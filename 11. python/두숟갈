1. 코딩 스타일
코드는 가독성이 좋고 이해하기 쉬워야한다. 
- 축약적이거나 함축적인 변수명은 피한다.
- 함수 인자의 이름들은 꼭 써준다.
- 클래스와 메서드를 문서화한다.
- 코드에 주석은 꼭 달도록 한다. 
- 재사용 가능한 함수 또는 메서드 안에서 반복되는 코드들은 리팩터링을 해둔다.
- 함수와 메서드는 가능한 한 작은 크기를 유지한다. 어림잡에 스크롤 없이 읽을 수 있는 길이가 적당하다.
한동안 잊고 지낸 코드라도 어느 순간 다시 보았을 때 바로 얼마 전에 작업하던 내용처럼 쉽고 빠르게 그 내용을 이해하기 위함

PEP8은 파이썬 공식 스타일 가이드이다.
---- PEP8 vs flake8 비교하여 현재 프로젝트에 확인

프로젝트에서 임포트 순서를 정하자
ex. 1) 표준 라이브러리 임포트
    2) 장고 라이브러리 임포트
    3) 장고와 무관한 외부 앱 임포트
    4) 프로젝트 앱
---- 명시적 성격의 상대 임포트 ???  알아보고 수정 

import * 는 피하자
단 settings와 같은 설정파일에는 import * 을 하는게 좋다.


2. 최적화된 장고 환경 꾸미기
같은 데이터 베이스를 이용하라 
pip 과 virtualenv 사용하기 

-> 운영과 개발환경을 최대한 같게 맞추어야 운영에서 서비스 시작시 버그를 최소화 할 수 있다.


3. 어떻게 장고 프로젝트를 구성한 것인가?
선호하는 프로젝트 구성
<repository_root>
    <django_project_root>
        <configuration_root>

---- cookiecutter-django, django-kevin, django-twoscoopps-project를 하나씩 살펴보면서 현재 프로젝트에서 적용할수 있을만한 내용 찾기

4. 장고 앱 디자인의 기본
''' 좋은 장고 앱을 정의하고 개발하는 것은 더글라스 맥얼로이의 유닉스 철학을 따르는 것이다. "한번에 한 가지 일을 하고 그 한 가지 일을 매우 충실히 하는 프로그램을 짜는 것이다. "'''
장고 앱 : 프로젝트의 한 기능을 표현하기 위해 디자인된 작은 라이브러리
- 가능한 한 단어
- 일반적으로 앱의 중심이 되는 모델의 복수형태(blog 같이 복수가 없으면 blog)
- PEP-8 규약에 맞는 이름

앱의 기능이 너무 복잡하다면 여러 개의 작은 앱으로 나누어야한다. 


5. settings와 requirements 파일
settings의 데이터는 서버가 시작될 때 적용되며 세팅값의 새로운 적용은 서버를 재시작

- require.py 파일 만들기
- settings 파일 쪼개기




6. 장고에서 모델 이용하기
- 데이터베이스 정규화




8.



9.




10. 
---- 다중 상속 클래스 확인 apiview








22.로깅

서로 다른 로그 레벨을 적절히 사용
모듈별 로거 만들기
중요한 이벤트에 대한 정보를 로깅
어플리케이션 상태에 대한 자세한 정보 포함

애플리케이션 에러를 디버깅할 떄 쓸수 이ㅏㅆ음
성능에 관련된 정보를 수집



