init 메소드 : 클래스가 인스턴스화 될 때 호출됩니다. 따라서 이 메소드는 객체가 생성될 때 여러가지 초기화 명령들이 필요할 때 유용하게 사용됩니다. 


필드 : 일반적인 변수와 다를것이 없으나, 클래스 혹은 객체의 네임스페이스에 묶여 있다는 점이 다릅니다.
메소드 : 클래스와 객체가 어떤 기능을 갖도록 하는 방법

각각은 
클래스 변수 : 클래스로부터 생성된 모든 인스턴스들이 접근할 수 있습니다. 클래스 변수는 한 개만 존재하며 어떤 객체가 클래스 변수를 변경하면 모든 다른 인스턴스들에 변경 사항이 반영됩니다. 

객체 변수 : 클래스로부터 생성된 각각의 객체/인스턴스에 속해 있는 변수입니다. 각각의 객체별로 객체 변수를 하나씩 따로 가지고 있으며, 서로 공유되지 않고 각 인스턴스에 존재하는 같은 이름의 필드끼리 서로 어떤 방식으로든 간섭되지 않습니다. 

self 객체

class Robot():
  population = 0

  @classmethod
  def how_many(cls):
    print("We Have {} robots").format(cls.population)

메소드 how_many 는 클래스에 소속되어 있는 메소드입니다. 해당 클래스의 어떤 부분까지 알아야 할 지에 따라 메소드를 클래스 메소드(class method)로 정의할지 스태틱 메소드(static method)로 정의할지 결정할 수 있습니다. 

데코레이터는 어떤 일을 추가로 해 주는 더 큰 함수로 해당 부분을 감싸주는 것이라고 생각하면 됩니다. 

상속
파이썬은 기본 클래스의 생성자를 자동으로 호출해 주지 않으므로 명시적으로 이것을 호출해 주어야 한다는 점을 기억하시기 바랍니다. 
